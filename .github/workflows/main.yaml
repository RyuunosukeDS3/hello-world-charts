name: Publish Helm Chart

on:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
      - name: Setup Helm
        uses: azure/setup-helm@v4
      - name: Helm Lint
        run: helm lint ./hello-world

  package:
    runs-on: ubuntu-latest
    name: Package
    needs: lint
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.3

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Bump Chart.yaml version based on commits
        run: |
          cd ./hello-world

          current_version=$(yq '.version' Chart.yaml)

          # Read last 20 commit messages
          commits=$(git log -n 1 --pretty=format:%s)

          bump="=nothing"
          if echo "$commits" | grep -q "\bBREAKING CHANGE"; then
            bump="major"
          elif echo "$commits" | grep -q "\bfeat:"; then
            bump="minor"
          elif echo "$commits" | grep -q "\bfix"; then
            bump="patch"
          fi

          # Calculate new version
          new_version=$(echo $current_version | awk -F. -v bump=$bump '{
            if (bump == "major") { $1 += 1; $2 = 0; $3 = 0 }
            else if (bump == "minor") { $2 += 1; $3 = 0 }
            else if (bump == "patch") { $3 += 1 }
            else if (bump == "nothing") {}
            print $1 "." $2 "." $3
          }')

          echo "Bumping chart version: $current_version -> $new_version"
          yq -i ".version = \"$new_version\"" Chart.yaml

      - name: Commit
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "✏️ chore: Publish Helm chart ${{ github.sha }}" || echo "No changes to commit"
          git push origin main

      - name: Package Helm chart
        run: helm package ./hello-world

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: "*.tgz"

  publish:
    runs-on: ubuntu-latest
    name: Publish
    needs: package
    steps:
      - name: Download and fetch gh-pages branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} repo

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: package
          path: repo/

      - name: Update Helm repo index
        run: |
          cd repo
          helm repo index .

      - name: Commit and push changes to gh-pages
        run: |
          cd repo
          git add index.yaml *.tgz
          git commit -m "✏️ chore: Publish Helm chart ${{ github.sha }}" || echo "No changes to commit"
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update:
    runs-on: ubuntu-latest
    needs: publish
    name: Update
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get new chart version
        id: get-version
        run: |
          version=$(cat hello-world/Chart.yaml | grep '^version:' | awk '{print $2}')
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Clone GitOps repository
        uses: actions/checkout@v3
        with:
          repository: RyuunosukeDS3/hello-world-gitops
          token: ${{ secrets.RELEASE_TOKEN }}
          path: gitops

      - name: Update application.yaml with new version
        run: |
          cd gitops
          yq -i '.spec.sources[] |= select(.chart == "hello-world") .targetRevision = "${{ steps.get-version.outputs.version }}"' application.yaml

      - name: Commit and push changes to GitOps repo
        run: |
          cd gitops
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add application.yaml
          git commit -m "✏️ chore: update hello-world chart version to ${{ steps.get-version.outputs.version }}" || echo "No changes to commit"
          git push origin HEAD
